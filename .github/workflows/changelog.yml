name: Changelog

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]
  pull_request_target:
    types: [opened, reopened, synchronize]

permissions:
  contents: read

env:
  BIN_NAME: lacewing

jobs:
  update_release_draft:
    name: Update release draft
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release_drafter.outputs.upload_url }}
    steps:
      - uses: release-drafter/release-drafter@v5
        id: release_drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_release:
    name: Attach builds
    needs: update_release_draft
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        build: [linux] #[linux, macos, win-msvc]
        include:
        - build: linux
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-gnu
#        - build: macos
#          os: macos-latest
#          rust: stable
#          target: x86_64-apple-darwin
#        - build: win-msvc
#          os: windows-2019
#          rust: stable
#          target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    env:
      DATABASE_URL: 'postgresql://postgres:testpassword@localhost:5432/lacewing?sslmode=disable'
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: lacewing
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: postgres
        ports:
          - "5432:5432"
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          fetch-depth: 1

      # Setup
      - name: Setup dependencies
        uses: ./.github/actions/setup_dependencies
        with:
          os: ${{ matrix.os }}
          target: ${{ matrix.target }}
          rust: ${{ matrix.rust }}
      - name: Migrate Postgres DB
        uses: ./.github/actions/database_migration
        with:
          database_url: ${{ env.DATABASE_URL }}
      - name: Get the release version from the tag
        shell: bash
        if: env.RELEASE_VERSION == ''
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"

      # Build
      - id: build-release
        name: Build Lacewing application
        uses: ./.github/actions/build_lacewing
        with:
          target: ${{ matrix.target }}

      # Package
      - name: Build archive
        shell: bash
        run: |
          outdir="./target/${{ env.TARGET_DIR }}/release"
          staging="${{ env.BIN_NAME }}-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
          mkdir -p "$staging"/{complete,doc}
          cp {README.md,LICENSE-*} "$staging/"
          cp {CHANGELOG.md,docs/*} "$staging/doc/"
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}.exe" "$staging/"
            cd "$staging"
            7z a "../$staging.zip" .
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
            tar czf "$staging.tar.gz" -C "$staging" .
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.update_release_draft.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
